plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace 'eu.rekisoft.flutter.autologin'
    compileSdkVersion = 34

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "eu.rekisoft.flutter.autologin"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    final properties = new Properties()
    final configFile = file("${project.rootDir}/local.properties")
    if (configFile.exists()) {
        properties.load(configFile.newDataInputStream())
    }
    def keystore = file("${project.rootDir.parent}/android/keystore.jks")
    def password = System.getenv('KEYSTORE_PASSWORD') ?: properties.getProperty('KEYSTORE_PASSWORD')

    signingConfigs {
        example {
            if (keystore.exists() && password != null) {
                storeFile keystore
                storePassword password
                keyAlias 'release'
                keyPassword password
            } else {
                print("Using debug signing. keystore found: ${keystore.exists()}, password found: ${password != null}")
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
        }
        debug {
            // use real certificate if you can otherwise the default debug certificate will be used
            if (keystore.exists() && password != null) {
                signingConfig signingConfigs.example
            }
        }
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.22"
}
