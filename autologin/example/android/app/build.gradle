plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'dev.flutter.flutter-gradle-plugin'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.1-snapshot'
}

android {
    namespace 'eu.rekisoft.flutter.autologin'
    compileSdkVersion = 34

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId 'eu.rekisoft.flutter.autologin'
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    final properties = new Properties()
    final configFile = file("${project.rootDir}/local.properties")
    if (configFile.exists()) {
        properties.load(configFile.newDataInputStream())
    }
    def devKeystore = file("${project.rootDir.parent}/android/keystore.jks")
    def devPassword = properties.getProperty('DEV_KEYSTORE_PASSWORD')
    def uploadKeystore = file("${project.rootDir.parent}/android/upload.jks")
    def uploadPassword = System.getenv('UPLOAD_KEYSTORE_PASSWORD') ?: properties.getProperty('UPLOAD_KEYSTORE_PASSWORD')

    signingConfigs {
        upload {
            if (uploadKeystore.exists() && uploadPassword != null) {
                storeFile uploadKeystore
                storePassword uploadPassword
                keyAlias 'upload'
                keyPassword uploadPassword
            } else {
                print("Upload not possible: Keystore is ${uploadKeystore.exists()?'':'not '}found and password is ${uploadPassword == null?'not ':''}set")
            }
        }
        dev {
            if (devKeystore.exists() && devPassword != null) {
                storeFile devKeystore
                storePassword devPassword
                keyAlias 'release'
                keyPassword devPassword
            } else {
                print("Using debug signing. Keystore is ${devKeystore.exists()?'':'not '}found and password is ${devPassword == null?'not ':''}set")
            }
        }
    }

    buildTypes {
        release {
            if (uploadKeystore.exists() && uploadPassword != null) {
                signingConfig signingConfigs.upload
            }
        }
        debug {
            if (devKeystore.exists() && devPassword != null) {
                signingConfig signingConfigs.dev
            }
        }
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = '1.8'
    }

    packagingOptions {
        exclude '.readme'
        exclude 'LICENSE.txt'
        exclude 'README.txt'
        exclude '**/README.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude '**/LICENSE'
        exclude '**/LICENSE*'
        exclude '**/LICENSE*'
        exclude '**/NOTICE'
        exclude '**/NOTICE*'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/*.kotlin_module'
        exclude 'META-INF/*.version'
        exclude 'kotlin/**'
        exclude '**.properties'
        exclude 'androidsupportmultidexversion.txt'
        exclude 'javax/**'
        exclude 'androidx/test/**'
        exclude 'junit/**'
        exclude 'DebugProbesKt.bin'
        exclude 'kotlin-tooling-metadata.json'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.9.22'
    implementation 'com.google.android.gms:play-services-instantapps:17.0.0'
}
